# Two ways to create a Secret:
# 1. Using kubectl command line tool like:
# ### kubectl create secret generic secret-name --from-literal=key1=value1 --from-literal=key2=value2
# --from-literal is used to create a Secret from literal values.
#
# ### kubectl create secret generic secret-name --from-file=path/to/file
# --from-file is used to create a Secret from a file.
#
# ### kubectl create secret generic secret-name --from-env-file=path/to/env/file
# --from-env-file is used to create a Secret from an env file.
#
# 2. Using YAML file like:
 apiVersion: v1
 kind: Secret 
 metadata:
   name: secret-name
 type: Opaque   
 data:
   key1: c2VjcmV0dmFsdWUx ## base64 encoded value of secretvalue1
   key2: c2VjcmV0dmFsdWUy
   APP_COLOR: c2VjcmV0dmFsdWUy ## base64 encoded value of secretvalue2
#
#   # The data field is used to specify the data that should be stored in the Secret.
#   # The data field is a map of key-value pairs, where each key is the name of the data item and the value is the value of the data item.
#   # The value of the data item is base64 encoded.

## before using the secret in the Pod, we need to encode the value using the following command:
# ### echo -n 'secretvalue1' | base64
# ### echo -n 'secretvalue2' | base64
# # The -n flag is used to specify that the value should not be encoded with a newline character.

# # The output of the above command will be:  c2VjcmV0dmFsdWUx
# # The output of the above command will be:  c2VjcmV0dmFsdWUy

# To view the Secret, you can use the following command:  
# ### kubectl get secret secret-name -o yaml

# To decode the value of the Secret, you can use the following command:
# ### echo c2VjcmV0dmFsdWUx | base64 --decode
# ### echo c2VjcmV0dmFsdWUy | base64 --decode
# # The --decode flag is used to specify that the value should be decoded from base64.
#

---
# To map the Secret to the Pod using the envForm field:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    env: production
spec:
  containers:
    - name: nginx
      image: nginx
      envFrom:
        - secretRef:
            name: secret-name
          # key: APP_COLOR
          # The key field is used to specify the name of the key in the Secret that should be used to set the environment variable.
      # The envFrom field is used to specify environment variables that should be set in the container when it is started.
      # The envFrom field is a list of environment variables, where each environment variable is specified as a name-value pair.

# You could enject the secret as Single env variable like:
# env:
#   - name: APP_COLOR
#     valueFrom:
#       secretKeyRef:
#         name: secret-name
#         key: APP_COLOR

# You could enject the secret as Volume like:
# volumeMounts:
#   - name: secret-volume
#     mountPath: /etc/secret-volume
#     readOnly: true
# volumes:
#   - name: secret-volume
#     secret:
#       secretName: secret-name


# Encrypting Secrets in Kubernetes:
# Kubernetes Secrets are stored in etcd, which is the key-value store used by Kubernetes to store all of its data.
# # By default, Secrets are stored in etcd in plain text, which means that anyone with access to etcd can read the Secrets.
# the Secrets can be seen in plain text by running the following command:
# ### ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key get /registry/secrets/default/secret-name | hexdump -C
# Or you can use the following command:
# ### 
# # The above command will return the value of the Secret in plain text.


# # To encrypt Secrets in etcd, you can use the EncryptionConfiguration resource to specify the encryption provider and the keys to be used for encryption.
## Encrypt data at rest in etcd:

# # 1. Check the encryption-provider-config are enabled in the kube-apiserver.yaml file:
# # # The encryption-provider-config flag is used to specify the path to the encryption configuration file you can find out by this command:
# ### kubectl get pods -n kube-system -l component=kube-apiserver -o yaml | grep encryption-provider-config
## or you can use the following command:
# ### ps -aux | grep kube-apiserver | grep 'encryption-provider-config' 

# # 2. Create a file called encryption-config.yaml with the following content:
---
#apiVersion: apiserver.config.k8s.io/v1
#kind: EncryptionConfiguration
#resources:
#  - resources:
#      - secrets
#    providers:
#      - aescbc:
#          keys:
#            - name: key1
#              secret: <BASE 64 ENCODED SECRET>
#            - name: key2
#              secret: c2VjcmV0dmFsdWUy
#      - identity: {}
#      - secertbox:
#          keys:
#            - name: key1
#              secret: c2VjcmV0dmFsdWUx
#            - name: key2
#             secret: c2VjcmV0dmFsdWUy

# # The above configuration specifies that the Secrets should be encrypted using the aescbc encryption provider and the key with the name key1. 
# Order of the keys is important, the first key is used to encrypt the data and the second key is used to decrypt the data.
# The identity: {} provider is used to specify that the data should not be encrypted if it was at the first place.
# The aescbc provider is used to specify that the data should be encrypted using the AES encryption algorithm in CBC mode.
# The secretbox provider is used to specify that the data should be encrypted using the secretbox encryption provider.

## After Enabling the encryption provider, you can update the existing Secrets to be encrypted by running the following command:
# ### kubectl get secrets --all-namespaces -o json | kubectl replace --force -f -
